from uuid import uuid4from django.db import modelsfrom django.db.models.signals import pre_savefrom django.dispatch import receiverdef upload_location(instance, filename):    ext = filename.split('.')[-1]    file_path = 'img/{}.{}'.format(uuid4().hex, ext)    return file_pathdef partners_upload_location(instance, filename):    ext = filename.split('.')[-1]    file_path = 'img/{}.{}'.format(instance.name, ext)    return file_pathdef doc_upload_location(instance, filename):    ext = filename.split('.')[-1]    file_path = 'docs/{}.{}'.format(instance.name, ext)    return file_pathclass AboutUsModel(models.Model):    text = models.TextField()class ProductsModel(models.Model):    img = models.ImageField(upload_to=upload_location)    title = models.CharField(max_length=255)    header = models.CharField(max_length=255)    url = models.URLField(null=True, blank=True)    play_market = models.URLField(null=True, blank=True)    app_store = models.URLField(null=True, blank=True)    phone = models.CharField(max_length=255, null=True, blank=True)    text = models.TextField()    order = models.IntegerField(default=0)class TechnologiesModel(models.Model):    name = models.CharField(max_length=255)    img = models.ImageField(upload_to=upload_location)class ServiceItemsModel(models.Model):    img = models.ImageField(upload_to=upload_location)    title = models.CharField(max_length=255)    text = models.TextField()class ServiceModel(models.Model):    header = models.CharField(max_length=255)    img = models.ImageField(upload_to=upload_location)    text = models.TextField()    url = models.URLField(null=True, blank=True)    frontend = models.ManyToManyField(TechnologiesModel, related_name="fservices", null=True, blank=True)    backend = models.ManyToManyField(TechnologiesModel, related_name="bservices", null=True, blank=True)    items = models.ManyToManyField(ServiceItemsModel, null=True, blank=True)class DocumentsModel(models.Model):    name = models.CharField(max_length=255)    document = models.FileField(upload_to=doc_upload_location)    size = models.CharField(max_length=255, null=True, blank=True, help_text="automatic generated")class ContactsModel(models.Model):    lat = models.CharField(max_length=255, blank=True, null=True)    long = models.CharField(max_length=255, blank=True, null=True)    google_maps = models.URLField(null=True, blank=True)    yandex_maps = models.URLField(null=True, blank=True)    phone = models.CharField(null=True, blank=True, max_length=255)    email = models.EmailField(null=True, blank=True)    address = models.TextField(null=True, blank=True)    facebook = models.URLField(null=True, blank=True)    telegram = models.URLField(null=True, blank=True)    instagram = models.URLField(null=True, blank=True)class OurPartnersModel(models.Model):    name = models.CharField(max_length=255)    img = models.ImageField(upload_to=partners_upload_location)class OurStatisticsModel(models.Model):    year = models.IntegerField()    customer_status = models.IntegerField(default=100)    projects_count = models.IntegerField()    employees_count = models.IntegerField()@receiver(pre_save, sender=DocumentsModel)def add_size(sender, instance: DocumentsModel = None, created=False, **kwargs):    x = instance.document.size    print(x)    y = 512000    if x < y:        value = round(x / 1000, 2)        ext = ' KB'    elif x < y * 1000:        value = round(x / 1024000, 2)        ext = ' MB'    else:        value = round(x / 1024000000, 2)        ext = ' GB'    instance.size = str(value) + ext